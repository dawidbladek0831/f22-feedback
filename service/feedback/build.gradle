plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'pl.app.feedback'
version = '0.0.1'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	SPRING_DOTENV_VERSION = '3.0.0'
	MODDELMAPPER_VERSION = '3.1.1'
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	// COMMON
	implementation project(':common:exception')
	implementation project(':common:event')

	// WEB
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// DATABASE
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	// BROKER
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'

	// LOMBOK
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"

	// MAPPER
	implementation "org.modelmapper:modelmapper:${MODDELMAPPER_VERSION}"
	implementation "org.modelmapper.extensions:modelmapper-spring:${MODDELMAPPER_VERSION}"

	// ENV
	implementation "me.paulschwarz:spring-dotenv:${SPRING_DOTENV_VERSION}"

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// MOCKITO
	testImplementation 'org.mockito:mockito-core:5.2.0'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.11'
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()

	doFirst {
		def byteBuddyJar = configurations.testRuntimeClasspath.files.find {
			it.name.contains("byte-buddy-agent")
		}
		if (byteBuddyJar) {
			jvmArgs += ["-javaagent:${byteBuddyJar.absolutePath}"]
		} else {
			throw new GradleException("byte-buddy-agent JAR not found")
		}
	}
}

tasks.jar {
	archiveFileName.set("normal.jar")
}
tasks.bootJar {
	archiveFileName.set("executable.jar")
}